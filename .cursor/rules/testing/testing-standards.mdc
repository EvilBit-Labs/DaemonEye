---
globs: tests/**/*.rs,**/*test*.rs
alwaysApply: false
---
# Testing Standards for DaemonEye

## Testing Architecture

Follow the **comprehensive testing strategy**:

1. **Unit Tests**: Algorithms and core logic only, minimal scope
2. **Integration Tests**: Primary testing approach with minimal mocking
3. **Property Testing**: proptest for generative testing of edge cases
4. **Fuzz Testing**: Extensive fuzzing for security-critical components
5. **Performance Testing**: Criterion benchmarks with regression detection

## Test Organization

- Use cargo-nextest for faster, more reliable test execution
- Use tokio-test for async runtime testing utilities
- Use insta for snapshot testing of CLI outputs and behavior
- Use insta for snapshot testing and predicates for validation
- Use proptest for generative testing of edge cases and invariants
- Follow the pattern in [AGENTS.md](mdc:AGENTS.md):

```rust
#[cfg(test)]
mod tests {
    use super::*;
    use insta::assert_snapshot;

    #[tokio::test]
    async fn test_process_collection() {
        // Test implementation
    }
}
```

## CLI Testing

- Use `insta` for snapshot testing of command-line interfaces
- Test both success and error cases
- Validate output format (human-readable and JSON)
- Test argument parsing and validation

## Async Testing

- Use `#[tokio::test]` for async test functions
- Test error handling with proper error types
- Use `tokio::time::timeout` for testing timeouts

## Database Testing

- Test redb database operations with concurrent access
- Test migrations and schema changes
- Validate data integrity and constraints
- Test ACID transaction properties

## Performance Testing

- Test performance requirements with Criterion benchmarks
- Validate CPU, memory, and latency targets
- Include regression detection in CI
