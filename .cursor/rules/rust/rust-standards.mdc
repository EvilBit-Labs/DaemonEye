---
globs: **/*.rs
alwaysApply: false
---
# Rust Coding Standards for SentinelD

## Language and Edition

- Always use **Rust 2024 Edition** (MSRV: 1.85+) as specified in [Cargo.toml](mdc:Cargo.toml)
- Follow the workspace configuration in [Cargo.toml](mdc:Cargo.toml) with `unsafe_code = "forbid"` and `warnings = "deny"`

## Code Quality Requirements

- **Zero warnings policy**: All code must pass `cargo clippy -- -D warnings`
- **No unsafe code**: `unsafe_code = "forbid"` is enforced at workspace level
- **Formatting**: Use standard `rustfmt` with 119 character line length
- **Error Handling**: Use `thiserror` for structured errors, `anyhow` for error context
- **Async**: Async-first design using Tokio runtime

## Code Organization

- Use trait-based service interfaces for clear separation of concerns
- Implement comprehensive error handling with thiserror
- Use strongly-typed structures with serde for serialization
- Follow the service layer pattern as defined in [AGENTS.md](mdc:AGENTS.md)

## Testing Requirements

- Include comprehensive tests with assert_cmd for CLI testing
- Test organization should follow the pattern in [AGENTS.md](mdc:AGENTS.md)
