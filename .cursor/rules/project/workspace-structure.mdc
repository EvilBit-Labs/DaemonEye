---
alwaysApply: true
---

# DaemonEye Workspace Structure

## Project Architecture

DaemonEye is a **multi-tier security architecture** workspace supporting:

**Core Components:**

1. **procmond/**: Process monitoring daemon (privileged collector)
2. **daemoneye-agent/**: User-space orchestrator for alerting and network operations
3. **daemoneye-cli/**: Command-line interface for queries and configuration
4. **daemoneye-lib/**: Shared library providing common functionality

**Enterprise Components:**
5. **security-center/**: Centralized management (Business/Enterprise tiers)
6. **project_specs/**: Project documentation and specifications

**Deployment Tiers:**

- **Free Tier**: Standalone agents (procmond + daemoneye-agent + daemoneye-cli)
- **Business Tier**: + Security Center + Enterprise integrations
- **Enterprise Tier**: + Kernel monitoring + Federated architecture + Advanced SIEM

## Workspace Configuration

- **Language**: Rust 2024 Edition (MSRV: 1.85+)
- **Resolver**: Version 3 as specified in [Cargo.toml](mdc:Cargo.toml)
- **Members**: procmond, daemoneye-cli, daemoneye-agent, daemoneye-lib
- **Linting**: Zero warnings policy with `unsafe_code = "forbid"`

## Key Files

- [Cargo.toml](mdc:Cargo.toml): Workspace configuration and shared dependencies
- [justfile](mdc:justfile): Task runner with DRY principles
- [rust-toolchain.toml](mdc:rust-toolchain.toml): Rust toolchain specification
- [AGENTS.md](mdc:AGENTS.md): Comprehensive project configuration and standards

## Development Workflow

- Use `just` commands for all development tasks
- Run `just lint` before committing (includes fmt-check and clippy)
- Use `just test` for running all tests
- Use `just build` for building the workspace

## Security Principles

- Isolate privileged operations (procmond) from network functionality (daemoneye-agent)
- Follow principle of least privilege
