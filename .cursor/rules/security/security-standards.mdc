---
globs: **/*.rs
---

# Security Standards for DaemonEye

## Security Architecture

DaemonEye follows a **multi-tier security architecture** with strict privilege separation and enterprise extensions.

## Core Security Requirements

- **Principle of Least Privilege**: Components run with minimal required permissions
- **SQL Injection Prevention**: AST validation with sqlparser, prepared statements only
- **Credential Management**: No hardcoded credentials, prefer environment variables
- **Input Validation**: Comprehensive validation with detailed error messages
- **Attack Surface Minimization**: No network listening, outbound-only connections

## Advanced Security Features

- **Cryptographic Integrity**: BLAKE3 hashing for audit chains
- **AST Validation**: sqlparser crate for query structure validation
- **Sandboxed Execution**: Read-only database connections for detection engine
- **Query Whitelist**: Only SELECT statements with approved functions allowed
- **mTLS Authentication**: Certificate chain validation for enterprise components
- **Code Signing**: SLSA Level 3 provenance, Cosign signatures (Enterprise tier)

## Data Protection

- Optional command-line redaction for privacy
- Configurable field masking in logs
- Secure credential storage (OS keychain integration)
- Database encryption support for sensitive deployments

## Privilege Management

- Run with minimal required privileges by default
- Optional elevated mode for enhanced metadata collection
- Automatic privilege dropping after initialization
- Comprehensive audit logging

## Code Safety

- `unsafe_code = "forbid"` enforced at workspace level
- Use safe Rust patterns throughout
- Validate all external inputs
- Implement proper error boundaries

## Security Testing

- Test privilege escalation scenarios
- Validate input sanitization
- Test error handling for security-sensitive operations
- Verify no sensitive data leakage in logs
